// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tooltip alignment right-aligned 1`] = `
.c1 {
  z-index: 1;
  right: 0;
  position: absolute;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 1rem;
  background-color: #FFF;
  border-radius: 4px;
  box-shadow: 0 0 0.25rem 0 rgba(0,0,0,0.08),0 0.5rem 0.5rem 0 rgba(0,0,0,0.08),0 1rem 1rem 0 rgba(0,0,0,0.08);
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  will-change: transform;
  -webkit-animation: gcKUNh 0.4s ease-in-out;
  animation: gcKUNh 0.4s ease-in-out;
  -webkit-animation-direction: reverse;
  animation-direction: reverse;
}

.c1,
.c1::after {
  color: #31373F;
}

.c1::after {
  right: 1rem;
  content: "";
  position: absolute;
  bottom: 100%;
  height: 0;
  width: 0;
  pointer-events: none;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: #FFF;
  border-width: 0.5rem;
}

.c2 {
  position: relative;
}

.c0 {
  position: relative;
}

<div
  aria-hidden={false}
  className="c0"
  id="test-id"
  role="tooltip"
>
  <div
    className="c1"
  >
    <div
      className="c2"
    >
      <p>
        Hi, I'm a Tooltip
      </p>
    </div>
  </div>
</div>
`;

exports[`Tooltip renders as active when defined 1`] = `
.c1 {
  z-index: 1;
  left: 0;
  position: absolute;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 1rem;
  background-color: #FFF;
  border-radius: 4px;
  box-shadow: 0 0 0.25rem 0 rgba(0,0,0,0.08),0 0.5rem 0.5rem 0 rgba(0,0,0,0.08),0 1rem 1rem 0 rgba(0,0,0,0.08);
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  will-change: transform;
  -webkit-animation: gcKUNh 0.4s ease-in-out;
  animation: gcKUNh 0.4s ease-in-out;
  -webkit-animation-direction: reverse;
  animation-direction: reverse;
}

.c1,
.c1::after {
  color: #31373F;
}

.c1::after {
  left: 1rem;
  content: "";
  position: absolute;
  bottom: 100%;
  height: 0;
  width: 0;
  pointer-events: none;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: #FFF;
  border-width: 0.5rem;
}

.c2 {
  position: relative;
}

.c0 {
  position: relative;
}

<div
  aria-hidden={false}
  className="c0"
  id="test-id"
  role="tooltip"
>
  <div
    className="c1"
  >
    <div
      className="c2"
    >
      <p>
        Hi, I'm a Tooltip
      </p>
    </div>
  </div>
</div>
`;

exports[`Tooltip renders as an error 1`] = `
.c1 {
  z-index: 1;
  left: 0;
  position: absolute;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 1rem;
  background-color: #FF4E64;
  border-radius: 4px;
  box-shadow: 0 0 0.25rem 0 rgba(0,0,0,0.08),0 0.5rem 0.5rem 0 rgba(0,0,0,0.08),0 1rem 1rem 0 rgba(0,0,0,0.08);
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  will-change: transform;
  -webkit-animation: gcKUNh 0.4s ease-in-out;
  animation: gcKUNh 0.4s ease-in-out;
  -webkit-animation-direction: reverse;
  animation-direction: reverse;
}

.c1,
.c1::after {
  color: #FFF;
}

.c1::after {
  left: 1rem;
  content: "";
  position: absolute;
  bottom: 100%;
  height: 0;
  width: 0;
  pointer-events: none;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: #FF4E64;
  border-width: 0.5rem;
}

.c2 {
  position: relative;
}

.c0 {
  position: relative;
}

<div
  aria-hidden={false}
  className="c0"
  id="test-id"
  role="tooltip"
>
  <div
    className="c1"
  >
    <div
      className="c2"
    >
      <p>
        Hi, I'm a Tooltip
      </p>
    </div>
  </div>
</div>
`;

exports[`Tooltip renders hidden and left-aligned by default 1`] = `
.c1 {
  z-index: 1;
  left: 0;
  position: absolute;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 1rem;
  background-color: #FFF;
  border-radius: 4px;
  box-shadow: 0 0 0.25rem 0 rgba(0,0,0,0.08),0 0.5rem 0.5rem 0 rgba(0,0,0,0.08),0 1rem 1rem 0 rgba(0,0,0,0.08);
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  will-change: transform;
  -webkit-animation: gcKUNh 0.4s ease-in-out;
  animation: gcKUNh 0.4s ease-in-out;
}

.c1,
.c1::after {
  color: #31373F;
}

.c1::after {
  left: 1rem;
  content: "";
  position: absolute;
  bottom: 100%;
  height: 0;
  width: 0;
  pointer-events: none;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: #FFF;
  border-width: 0.5rem;
}

.c2 {
  position: relative;
}

.c0 {
  position: relative;
}

<div
  aria-hidden={true}
  className="c0"
  id="test-id"
  role="tooltip"
>
  <div
    className="c1"
  >
    <div
      className="c2"
    >
      <p>
        Hi, I'm a Tooltip
      </p>
    </div>
  </div>
</div>
`;

exports[`Tooltip renders with close button if onClose handler was passed closeable 1`] = `
.c4 {
  vertical-align: middle;
}

.c1 {
  z-index: 1;
  left: 0;
  position: absolute;
  max-width: 100%;
  padding: 0.5rem;
  margin-top: 1rem;
  background-color: #FFF;
  border-radius: 4px;
  box-shadow: 0 0 0.25rem 0 rgba(0,0,0,0.08),0 0.5rem 0.5rem 0 rgba(0,0,0,0.08),0 1rem 1rem 0 rgba(0,0,0,0.08);
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  will-change: transform;
  -webkit-animation: gcKUNh 0.4s ease-in-out;
  animation: gcKUNh 0.4s ease-in-out;
}

.c1,
.c1::after {
  color: #31373F;
}

.c1::after {
  left: 1rem;
  content: "";
  position: absolute;
  bottom: 100%;
  height: 0;
  width: 0;
  pointer-events: none;
  border-style: solid;
  border-color: transparent;
  border-bottom-color: #FFF;
  border-width: 0.5rem;
}

.c2 {
  position: relative;
  padding-right: 1.3rem;
}

.c0 {
  position: relative;
}

.c3 {
  background: none;
  padding: 0;
  cursor: pointer;
  border: none;
  font-size: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 0;
  font-size: 0.8rem;
}

<div
  aria-hidden={true}
  className="c0"
  id="test-id"
  role="tooltip"
>
  <div
    className="c1"
  >
    <div
      className="c2"
      onClose={[Function]}
    >
      <p>
        Hi, I'm a Tooltip
      </p>
      <button
        className="c3"
      >
        <svg
          className="c4"
          color="#8697A2"
          fontSize="inherit"
          height="1em"
          onClick={[Function]}
          viewBox="0 0 20 20"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M12.609 10L20 17.391 17.391 20 10 12.609 2.609 20 0 17.391 7.391 10 0 2.609 2.609 0 10 7.391 17.391 0 20 2.609z"
            fill="currentColor"
            fillRule="evenodd"
          />
        </svg>
      </button>
    </div>
  </div>
</div>
`;
